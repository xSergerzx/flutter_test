import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart' show rootBundle;

void main() {
  runApp(PlaywrightTest());
}

class PlaywrightTest extends StatefulWidget {
  @override
  State<PlaywrightTest> createState() => PlaywrightTestState();
}

class TestItem {
  final String question;
  final List<String> options;
  final int correctIndex;

  TestItem({
    required this.question,
    required this.options,
    required this.correctIndex,
  });
}

class PlaywrightTestState extends State<PlaywrightTest> {
  List<TestItem> tests = [];        // –°—é–¥–∞ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —Ç–µ—Å—Ç—ã –∏–∑ JSON
  int currentTestIndex = 0;         // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
  String? resultMessage;            // –°–æ–æ–±—â–µ–Ω–∏–µ "–ø—Ä–∞–≤–∏–ª—å–Ω–æ / –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"

  // ----------------------------
  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤ –∏–∑ JSON
  Future<void> loadTests() async {
    final data = await rootBundle.loadString('assets/tests.json');
    final List<dynamic> jsonResult = json.decode(data);
    setState(() {
      tests = jsonResult.map((json) => TestItem(
        question: json['question'],
        options: List<String>.from(json['options']),
        correctIndex: json['correctIndex'],
      )).toList();
    });
  }
  // ----------------------------

  @override
  void initState() {
    super.initState();
    loadTests(); // –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
  void checkAnswer(int selectedIndex) {
    setState(() {
      if (selectedIndex == currentTest.correctIndex) {
        resultMessage = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!';
      } else {
        resultMessage = '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!';
      }
    });
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É
  void nextTest() {
    setState(() {
      if (currentTestIndex < tests.length - 1) {
        currentTestIndex++;
        resultMessage = null;
      } else {
        resultMessage = 'üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!';
      }
    });
  }

  // –ì–µ—Ç—Ç–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
  TestItem get currentTest => tests[currentTestIndex];

  @override
  Widget build(BuildContext context) {
    // –ü–æ–∫–∞ —Ç–µ—Å—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
    if (tests.isEmpty) {
      return MaterialApp(
        home: Scaffold(
          appBar: AppBar(title: Text('Playwright Practice')),
          body: Center(child: CircularProgressIndicator()),
        ),
      );
    }

    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Playwright Practice')),
        body: Center(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // –í–æ–ø—Ä–æ—Å
              Text(
                currentTest.question,
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 20),

              // –ö–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
              for (int i = 0; i < currentTest.options.length; i++)
                ElevatedButton(
                  onPressed: () => checkAnswer(i),
                  child: Text(currentTest.options[i]),
                ),

              const SizedBox(height: 20),

              // –†–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∫–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç"
              if (resultMessage != null)
                Column(
                  children: [
                    Text(
                      resultMessage!,
                      style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 10),
                    ElevatedButton(
                      onPressed: nextTest,
                      child: Text('–°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç'),
                    ),
                  ],
                ),
            ],
          ),
        ),
      ),
    );
  }
}